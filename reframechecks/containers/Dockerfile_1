FROM nvidia/cuda:11.7.0-base-ubuntu22.04
# {{{ readme
# ubjg: 
#   cd /tmp2/JG/ascent/
#   sudo docker build -f Dockerfile_1 -t deleteme:latest .
# push to jfrog (buildah):
#   # check src dir
#   # scp jgpiccinal@86.50.167.34:...
#   salloc -N1 -C'gpu&contbuild' -A`id -gn` -t1:0:0
#   ssh $SLURM_NODELIST
#   module load daint-gpu Buildah/1.26.1
#   buildah bud --format=docker --tag sph-exa_base:cuda -f Dockerfile_1 .
#   # TODO stop using art.cscs.ch, use jfrog.svc.cscs.ch:
#   buildah login -u $USER art.cscs.ch
#   buildah push sph-exa_base:cuda docker://art.cscs.ch/contbuild/testing/jg/sph-exa_base:cuda
#   #buildah pull art.cscs.ch/contbuild/testing/jg/sph-exa_base:cuda
#   buildah login -u $USER jfrog.svc.cscs.ch
#   buildah push sph-exa_base:cuda docker://jfrog.svc.cscs.ch/contbuild/testing/pasc/sphexa/sph-exa_base:cuda
#   # --> test with: hpctools.git/reframechecks/containers/reframe_ci.py
# push to dockerhub:
#   sudo docker login -u sphexa
#   sudo docker tag deleteme:latest sphexa/ascent:latest
#   sudo docker push sphexa/ascent:latest
# }}}

#{{{ src:
ENV TZ Europe/Zurich
# wget https://github.com/Kitware/CMake/releases/download/v3.24.0/cmake-3.24.0-linux-x86_64.tar.gz
# wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.13/hdf5-1.13.1/src/hdf5-1.13.1.tar.bz2
# wget https://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz
# wget https://github.com/google/googletest/archive/refs/tags/release-1.12.1.tar.gz
COPY src/cmake-3.24.0-linux-x86_64.tar.gz /usr/local/games/
COPY src/hdf5-1.13.1.tar.bz2 /usr/local/games/
COPY src/mpich-3.1.4.tar.gz /usr/local/games/
COPY src/release-1.12.1.tar.gz /usr/local/games/
# insitu:
# COPY src/ascent-v0.8.0-src-with-blt.tar.gz /usr/local/games/
# COPY src/conduit-v0.8.3-src-with-blt.tar.gz /usr/local/games/
# COPY src/v0.8.1.tar.gz /usr/local/games/
# COPY src/v1.7.1.tar.gz /usr/local/games/
# COPY src/v0.5.1.tar.gz /usr/local/games/
# = https://github.com/LLNL/blt/archive/refs/tags/v0.5.1.tar.gz
# TODO: glass.h5
#}}}

#{{{ apt:
#    && DEBIAN_FRONTEND=noninteractive \
#no: ENV DEBIAN_FRONTEND noninteractive
# Need to get 174 MB of archives.
# clang-12 libomp-12-dev \
RUN sed -i 's@archive.ubuntu.com@ubuntu.ethz.ch@' /etc/apt/sources.list \
    && apt update --quiet \
    && apt upgrade -y --quiet \
    && echo "## apt:" \
    && DEBIAN_FRONTEND=noninteractive \
       apt install -y --no-install-recommends \
       libtbb-dev zlib1g-dev git file wget vim-tiny \
       python-is-python3 python3-pip libpython3-dev python3-numpy python3-matplotlib \
       cuda-nvcc-11-7 libcublas-dev-11-7 pkg-config \
    && apt clean autoremove

#{{{ apt
# RUN apt-get update \
#     && apt-get install -y sudo
# # add a new user
# RUN adduser docker-nemo --gecos "Docker Nemo,1,0000,0001" --disabled-password
# RUN echo "docker-nemo:password" | chpasswd \
#     && usermod -aG sudo docker-nemo
# # update and install dependencies
# RUN apt-get install -y \
#             software-properties-common \
#             wget \
#             locate \
#             && add-apt-repository -y ppa:ubuntu-toolchain-r/test \
#             && apt-get update \
#             && apt-get install -y \
#             make \
#             git \
#             curl \
#             vim \
#             && apt-get install -y cmake \
#             && apt-get install -y \
#             gcc \
#             g++ \
#             gfortran
#}}}
#}}}

#{{{ cmake:
RUN echo \
    && echo "## cmake:" \
    && export VV=3.24.0 VVshort=3.24 \
    && cd /usr/local/games \
    && tar xf cmake-$VV-linux-x86_64.tar.gz \
    && cp -a cmake-$VV-linux-x86_64/bin/* /usr/bin/ \
    && cp -a cmake-$VV-linux-x86_64/share/cmake-$VVshort /usr/share/cmake-$VVshort \
    && rm -fr cmake-$VV-linux-x86_64.tar.gz cmake-$VV-linux-x86_64/bin/cmake-gui
#}}}

#{{{ mpich:
RUN echo \
    && echo "## mpich:" \
    && cd /usr/local/games \
    && tar xf mpich-3.1.4.tar.gz \
    && cd mpich-3.1.4/ \
    && ./configure --prefix=/usr --enable-fortran=no > /dev/null \
    && make --quiet -j `grep processor /proc/cpuinfo | wc -l` install > /dev/null \
    && cd /usr/local/games \
    && rm -fr mpich-3.1.4 mpich-3.1.4.tar.gz \
    && ldconfig
#}}}

#{{{ hdf5:
RUN echo \
    && echo "## hdf5:" \
    && cd /usr/local/games \
    && tar xf hdf5-1.13.1.tar.bz2 \
    && cmake \
    -DCMAKE_C_COMPILER:STRING=mpicc \
    -DCMAKE_C_FLAGS:STRING=-w \
    -DONLY_SHARED_LIBS:BOOL=ON \
    -DHDF5_BUILD_HL_LIB:BOOL=ON \
    -DHDF5_ENABLE_Z_LIB_SUPPORT:BOOL=ON \
    -DBUILD_SHARED_LIBS:BOOL=ON \
    -DHDF5_ENABLE_PARALLEL:BOOL=ON \
    -DHDF5_BUILD_TOOLS:BOOL=OFF \
    -DBUILD_STATIC_LIBS=OFF \
    -DHDF5_BUILD_EXAMPLES:BOOL=OFF \
    -DBUILD_TESTING:BOOL=OFF \
    -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF \
    -DHDF5_ENABLE_SZIP_ENCODING:BOOL=OFF \
    -DHDF5_ENABLE_THREADSAFE:BOOL=OFF \
    -DHDF5_BUILD_CPP_LIB:BOOL=OFF \
    -DHDF5_BUILD_FORTRAN:BOOL=OFF \
    -DHDF5_BUILD_JAVA:BOOL=OFF \
    -S hdf5-1.13.1 -B build-hdf5 > /dev/null \
    && cmake --build build-hdf5 -t install -j \
    && cd /usr/local/games \
    && rm -fr hdf5-1.13.1.tar.bz2 hdf5-1.13.1 build-hdf5

#ln -fs /usr/lib/x86_64-linux-gnu/libdl.so.2 /usr/lib/x86_64-linux-gnu/libdl.so
#ln -fs /usr/lib/x86_64-linux-gnu/libpthread.so.0 /usr/lib/x86_64-linux-gnu/libpthread.so
#}}}

#{{{ googletest:
RUN echo \
    && echo "## googletest:" \
    && cd /usr/local/games \
    && export VV=1.12.1 \
    && tar xf release-$VV.tar.gz \
    && rm -f release-$VV.tar.gz
#}}}

#{{{ analytical_solutions: 
RUN echo \
    && echo "## analytical_solutions + reframe:" \
    && pip install ReFrame-HPC h5py matplotlib
#}}}

#{{{ next step: Dockerfile_2

## ascent: digest: sha256:661ade35cd1f05a5c7d9e9e755d093a7248dacc271ea6d1dfc0f684e7e0fb5a9 size: 4965
# singularity shell -B $PWD/SPH-EXA.git:/usr/local/games/SPH-EXA.git ./ascent_latest.sif
# cd /usr/local/games/
#insitu 
#insitu #{{{ VTK-m-1.7.1-cpeGNU-21.12.eb
#insitu RUN echo \
#insitu     && cd /usr/local/games \
#insitu     && tar xf v1.7.1.tar.gz \
#insitu     && cmake -S VTK-m-1.7.1 -B build-vtkm \
#insitu     -DCMAKE_BUILD_TYPE=Debug \
#insitu     -DVTKm_ENABLE_MPI:BOOL=ON \
#insitu     -DVTKm_ENABLE_OPENMP:BOOL=ON \
#insitu     -DVTKm_USE_64BIT_IDS=OFF \
#insitu     -DVTKm_USE_DOUBLE_PRECISION=ON \
#insitu     -DVTKm_USE_DEFAULT_TYPES_FOR_ASCENT=ON \
#insitu     -DVTKm_NO_DEPRECATED_VIRTUAL=ON \
#insitu     -DVTKm_ENABLE_TBB:BOOL=OFF > /dev/null \
#insitu     && cmake --build build-vtkm -t install -j \
#insitu     && cd /usr/local/games \
#insitu     && rm -fr v1.7.1.tar.gz VTK-m-1.7.1 build-vtkm
#insitu #}}}
#insitu 
#insitu # export CMAKE_PREFIX_PATH=/usr/local/share/vtkm-1.7
#insitu #{{{ VTK-h/VTK-h-0.8.1-cpeGNU-21.12.eb
#insitu RUN echo \
#insitu     && cd /usr/local/games \
#insitu     && tar xf v0.8.1.tar.gz \
#insitu     && cd vtk-h-0.8.1/src \
#insitu     && rmdir blt \
#insitu     && tar xf /usr/local/games/v0.5.1.tar.gz \
#insitu     && ln -s blt-0.5.1/ blt \
#insitu     && cd - \
#insitu     && cmake -S vtk-h-0.8.1/src -B build-vtkh \
#insitu     -DCMAKE_BUILD_TYPE=Debug \
#insitu     -DENABLE_FORTRAN:BOOL=OFF \
#insitu     -DVTKM_DIR=/usr/local/ \
#insitu     -DENABLE_TESTS:BOOL=OFF -DBUILD_TESTING:BOOL=OFF \
#insitu     -DTBB_INCLUDE_DIR:PATH=/usr/include \
#insitu     -DTBB_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libtbb.so \
#insitu     -DTBB_MALLOC_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libtbbmalloc.so \
#insitu     -DTBB_MALLOC_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libtbbmalloc.so \
#insitu     && cmake --build build-vtkh -t install -j \
#insitu     && rm -fr v0.8.1.tar.gz vtk-h-0.8.1 build-vtkh v0.5.1.tar.gz
#insitu #}}}
#insitu 
#insitu #{{{ Conduit/Conduit-0.8.3-cpeGNU-21.12-python3.eb -> /usr/local/lib/cmake/conduit/
#insitu # wget https://github.com/LLNL/conduit/releases/download/v0.8.3/conduit-v0.8.3-src-with-blt.tar.gz
#insitu # libpython3.8-dev python3-numpy python3-matplotlib
#insitu RUN echo \
#insitu     && cd /usr/local/games \
#insitu     && tar xf conduit-v0.8.3-src-with-blt.tar.gz \
#insitu     && cmake -S conduit-v0.8.3/src -B build-conduit \
#insitu     -DCMAKE_BUILD_TYPE=Debug \
#insitu     -DENABLE_PYTHON:BOOL=ON \
#insitu     -DENABLE_MPI:BOOL=ON \
#insitu     -DENABLE_FORTRAN:BOOL=OFF \
#insitu     -DENABLE_GTEST:BOOL=ON \
#insitu     -DHDF5_DIR=/usr/local/HDF_Group/HDF5/1.13.0 \
#insitu     -DHDF5_INCLUDE_DIR=/usr/local/HDF_Group/HDF5/1.13.0/include \
#insitu     -DHDF5_LIBRARIES=/usr/local/HDF_Group/HDF5/1.13.0/lib/libhdf5.so \
#insitu     -DCMAKE_CXX_FLAGS=-w \
#insitu     && cmake --build build-conduit -t install -j \
#insitu     && rm -fr conduit-v0.8.3-src-with-blt.tar.gz conduit-v0.8.3 build-conduit
#insitu 
#insitu #    && export PYTHONPATH=/usr/local/python-modules:$PYTHONPATH
#insitu #}}}
#insitu 
#insitu #{{{ Ascent-0.8.0-cpeGNU-21.12.eb
#insitu RUN echo \
#insitu     && cd /usr/local/games \
#insitu     && tar xf ascent-v0.8.0-src-with-blt.tar.gz \
#insitu     && cmake -S ascent-v0.8.0/src -B build-ascent \
#insitu     -DCMAKE_BUILD_TYPE=Debug \
#insitu     -DENABLE_MPI:BOOL=ON \
#insitu     -DENABLE_PYTHON:BOOL=ON \
#insitu     -DENABLE_OPENMP:BOOL=ON \
#insitu     -DENABLE_FORTRAN:BOOL=OFF \
#insitu     -DENABLE_TESTS:BOOL=OFF \
#insitu     -DVTKM_DIR=/usr/local/ \
#insitu     -DVTKH_DIR=/usr/local/ \
#insitu     -DCONDUIT_DIR=/usr/local/ \
#insitu     -DHDF5_INCLUDE_DIR=/usr/local/HDF_Group/HDF5/1.13.0/include \
#insitu     -DTBB_INCLUDE_DIR:PATH=/usr/include \
#insitu     -DTBB_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libtbb.so \
#insitu     -DTBB_MALLOC_LIBRARY_DEBUG:FILEPATH=/usr/lib/x86_64-linux-gnu/libtbbmalloc.so \
#insitu     -DTBB_MALLOC_LIBRARY_RELEASE:FILEPATH=/usr/lib/x86_64-linux-gnu/libtbbmalloc.so \
#insitu     && cmake --build build-ascent -t install -j \
#insitu     && rm -fr ascent-v0.8.0-src-with-blt.tar.gz ascent-v0.8.0 build-ascent
#insitu #}}}
#}}}
